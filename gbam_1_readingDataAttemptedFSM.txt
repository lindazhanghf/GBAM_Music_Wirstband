import processing.serial.*;
import processing.opengl.*;
import java.util.Scanner;
import java.lang.String;


static final int NUM_SAMPLE = 300;

/* Raw Data */
Serial port;
// int synced = 0;
int interval = 0;
// float[] q = new float[4];
// Quaternion quat = new Quaternion(1, 0, 0, 0);
// float[] gravity = new float[3];
// float[] euler = new float[3];
// float[] ypr = new float[3];
int seconds = 0;
String buffer;
public int x;
public int y;
public int z;  // Sometimes affected by gravity

/* Initilization stuff */
boolean doneInitializing = false; 
// int numSamples = 0;
// int sumZ = 0;
// int averageGravity = 0;

/* State Machine */
public Object state;
public IdleState idleState = new IdleState();
public SprintState sprintState = new SprintState();

void setup() {
    size(300, 300, OPENGL);
    // println(Serial.list());
    println("INITIALIZING...\nPlease wait for about 30 seconds");
    port = new Serial(this, "/dev/ttyUSB0", 115200);
    port.write('r');
    seconds = second();
}

void draw() {
    if (millis() - interval > 1000) {
        // resend single character to trigger DMP init/start
        // in case the MPU is halted/reset while applet is running
        port.write('r');
        interval = millis();
    }
    if (!doneInitializing)
        println(second() - seconds);
}

void executeState()
{
    state.execute();
}

void changeState(object newState)
{
    newState.setUp(state);
    state = newState;
}

void serialEvent(Serial port)
{
    interval = millis();
    while (port.available() > 0) {
        int input = port.read();
        if (parseData(input))    //finish parsing data
        {
            executeState();
            // int absAverage = (Math.abs(x) + Math.abs(y) + Math.abs(z))/3;
            // R^2 = Rx^2 + Ry^2 + Rz^2 
            // continue;
        }
    }
}

boolean parseData(int data)
{
    // print ((char)data);
    switch (data)
    {
        case '#':         // Mark the start of the data
            buffer = "";
            return false;
        case '$':         // Mark the end of the data
            Scanner s = new Scanner(buffer).useDelimiter("\t");
            x = s.nextInt();
            y = s.nextInt();
            z = s.nextInt();
            s.close();
            break;
        default :
            buffer += (char)data;
            return false;
    }
    if (!doneInitializing) //initializing process
    {
        if (Math.abs(x) + Math.abs(y) < 100)
        {
            if (numSamples < NUM_SAMPLE)
            {
                sumZ += z;
                numSamples++;
                if (numSamples == NUM_SAMPLE)
                {
                    averageGravity = sumZ / NUM_SAMPLE;
                    doneInitializing = true;
                    println ("DONE INITIALIZING !!!!!!!!!!!!!!");
                    changeState(idleState);
                }
            }
        }
    }

    // println("x: "+x+"\t\ty: "+y+"\t\tz: "+z);
    // println("x:" + formatNumber(x) + "  y:"+formatNumber(y) + "  z:"+formatNumber(z));
    return true;
}

String formatNumber(int number)
{
    if (number != 0)
    {
        String newString = "       " + String.valueOf(number);
        return newString.substring(newString.length() - 8);
    }
    else
        return "        ";
}